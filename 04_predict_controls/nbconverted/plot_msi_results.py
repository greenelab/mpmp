#!/usr/bin/env python
# coding: utf-8

# ## Plot microsatellite instability classification results
# 
# Here, we'll visualize the results of the MSI prediction experiments. Remember that we're trying to classify MSI-H ("high" microsatellite instability, inferred from sequencing assays) against all other classes (MSI-L = "low" microsatellite instability, MSS = "microsatellite stable" tumors, "indeterminate" tumors).
# 
# Results analyzed here are generated by the `run_msi_prediction.py` script.

# In[1]:


from pathlib import Path

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import mpmp.config as cfg
import mpmp.utilities.analysis_utilities as au
import mpmp.utilities.data_utilities as du

get_ipython().run_line_magic('load_ext', 'autoreload')
get_ipython().run_line_magic('autoreload', '2')


# ### Load results

# In[2]:


# set results directory
results_dir = Path(cfg.results_dirs['msi'], 'msi_5000_top_mad_std').resolve()


# In[3]:


results_df = au.load_msi_results(results_dir)

print(results_df.shape)
print(results_df.training_data.unique())
results_df.head()


# ### Plot results per cancer type, on true labels

# In[4]:


sns.set({'figure.figsize': (14, 12)})
sns.set_style('whitegrid')
fig, axarr = plt.subplots(2, 1)

plot_df = (
    results_df[(results_df.data_type == 'test') &
               (results_df.signal == 'signal')]
      .sort_values(by=['signal', 'training_data'])
)

sns.boxplot(data=plot_df, x='identifier', y='aupr', hue='training_data', ax=axarr[0])
axarr[0].set_title('MSI prediction performance, AUPR')
axarr[0].set_xlabel('Cancer type')
axarr[0].set_ylabel('AUPR')
axarr[0].set_ylim(0.35, 1.05)
axarr[0].legend(title='Data type')

sns.boxplot(data=plot_df, x='identifier', y='auroc', hue='training_data', ax=axarr[1])
axarr[1].set_title('MSI prediction performance, AUROC')
axarr[1].set_xlabel('Cancer type')
axarr[1].set_ylabel('AUROC')
axarr[1].set_ylim(0.35, 1.05)
axarr[1].legend(title='Data type')


# ### Plot results per cancer type, corrected for permuted labels baseline

# In[5]:


compare_df = au.compare_all_data_types(results_df,
                                       sig_alpha=0.05,
                                       filter_genes=False,
                                       compare_ind=True,
                                       metric='auroc')
compare_df.rename(columns={'gene': 'cancer_type'}, inplace=True)

compare_aupr_df = au.compare_all_data_types(results_df,
                                            sig_alpha=0.05,
                                            filter_genes=False,
                                            compare_ind=True,
                                            metric='aupr')
compare_aupr_df.rename(columns={'gene': 'cancer_type'}, inplace=True)

print(compare_df.shape)
print(compare_df.training_data.unique())
compare_df.head()


# In[6]:


sns.set({'figure.figsize': (14, 12)})
sns.set_style('whitegrid')
fig, axarr = plt.subplots(2, 1)

sns.boxplot(data=compare_aupr_df, x='cancer_type', y='delta_aupr',
            hue='training_data',
            hue_order=sorted(compare_aupr_df.training_data.unique()),
            ax=axarr[0])
axarr[0].set_title('MSI prediction performance, AUPR vs. permuted baseline')
axarr[0].set_xlabel('Cancer type')
axarr[0].set_ylabel('AUPR(signal) - AUPR(shuffled)')
axarr[0].set_ylim(0.0, 1.0)
axarr[0].legend(title='Data type')

sns.boxplot(data=compare_df, x='cancer_type', y='delta_auroc',
            hue='training_data',
            hue_order=sorted(compare_df.training_data.unique()),
            ax=axarr[1])
axarr[1].set_title('MSI prediction performance, AUROC vs. permuted baseline')
axarr[1].set_xlabel('Cancer type')
axarr[1].set_ylabel('AUROC(signal) - AUROC(shuffled)')
axarr[1].set_ylim(0.0, 1.0)
axarr[1].legend(title='Data type')


# ### Look at features selected from mutational signatures data
# 
# There are a few mutational signatures that have been directly associated with MSI. Let's see if those are selected frequently in our models, and if they tend to have positive coefficients (i.e. higher prevalence of signature -> higher probability of MSI-H status).

# In[7]:


nz_coefs = []
for identifier, seed, coefs in au.generate_nz_coefs_msi(results_dir):
    if 'mut_sigs' not in identifier: continue
    for fold_no, fold_coefs in enumerate(coefs):
        for feat_name, feat_coef in fold_coefs:
            nz_coefs.append([identifier, seed, fold_no, feat_name, feat_coef])
            
nz_coefs_df = pd.DataFrame(nz_coefs, columns=['identifier', 'seed', 'fold', 'name', 'coef'])
nz_coefs_df.head()


# In[8]:


# just average each coefficient over seeds/folds for now
coefs_df = (nz_coefs_df
  .groupby(['identifier', 'name'])
  .agg(['count', 'mean'])
  .drop(columns=['seed', 'fold'])
)
coefs_df.sort_values(by=[('coef', 'count'), ('coef', 'mean')], ascending=[False, False]).head(10)


# In[9]:


coefs_df[coefs_df.index.get_level_values(1).isin(
    ['SBS6', 'SBS14', 'SBS15', 'SBS20', 'SBS21', 'SBS26', 'SBS44']
)]


# In[10]:


coefs_df[coefs_df.index.get_level_values(0) == 'pancancer_mut_sigs'].sort_values(
    by=[('coef', 'count'), ('coef', 'mean')], ascending=[False, False]
).head(10)


# On [this page](https://cancer.sanger.ac.uk/signatures/sbs/sbs6/), we can see that the single-base mutational signatures commonly associated with MSI/defective DNA mismatch repair are SBS6, SBS14, SBS15, SBS20, SBS21, SBS26, and SBS44.
# 
# We can see in the tables above that on average, these signatures tend to have positive coefficients, and some of them (SBS15, SBS20, SBS21, SBS44) consistently have very large positive coefficients (indicating that the presence of these signatures implies a very high probability of MSI). This makes sense, given what is known about these signatures.
# 
# This effect is most clear in the individual cancer types, however - the pan-cancer predictor tends to rely more on cancer type and mutation burden, and there is less consistency in which signatures are selected by the model.
