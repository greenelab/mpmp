"""
Test cases for model fitting code in classify_utilities.py
"""
import pytest
import numpy as np
import pandas as pd

import mpmp.test_config as cfg
from mpmp.data_models.tcga_data_model import TCGADataModel
import mpmp.utilities.classify_utilities as cu
import mpmp.utilities.data_utilities as du

@pytest.fixture(scope='module')
def data_model():
    """Load data model and sample info data"""
    # TODO: define results dir?
    tcga_data = TCGADataModel(debug=True, test=True)
    sample_info_df = du.load_sample_info(train_data_type='expression')
    return tcga_data, sample_info_df

def test_simple(data_model):
    """Just test that the data model loads correctly with test option"""
    assert data_model is not None

@pytest.mark.parametrize("gene_info", cfg.stratified_gene_info)
def test_stratified_classification(data_model, gene_info):
    """Regression test for prediction using stratified cross-validation"""
    tcga_data, sample_info_df = data_model
    gene, classification = gene_info
    tcga_data.process_data_for_gene(gene,
                                    classification,
                                    gene_dir=None,
                                    shuffle_labels=False)
    results = cu.run_cv_stratified(tcga_data,
                                   'gene',
                                   gene,
                                   'expression',
                                   sample_info_df,
                                   num_folds=4,
                                   standardize_columns=True,
                                   shuffle_labels=False)
    metrics_df = pd.concat(results['gene_metrics'])
    results_file = cfg.test_stratified_results.format(gene)
    old_results = np.loadtxt(results_file)
    # make sure our results haven't changed; i.e. regression testing for model
    # if a change to model output is intentional, the saved results can be
    # regenerated by running mpmp/scripts/generate_test_data.py
    assert np.allclose(metrics_df['auroc'].values, old_results)


